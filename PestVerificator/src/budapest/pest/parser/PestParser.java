/* Generated By:JavaCC: Do not edit this line. PestParser.java */
package budapest.pest.parser;

import budapest.pest.ast.params.*;
import budapest.pest.ast.proc.*;
import budapest.pest.ast.exp.*;
import budapest.pest.ast.pred.*;
import budapest.pest.ast.pred.trm.*;
import budapest.pest.ast.stmt.*;

import budapest.pest.ast.Type;

import java.util.*;

public final class PestParser implements PestParserConstants {

  final public Program Program() throws ParseException {
        int line, column;
        Procedure proc;
        List<Procedure> procs = new ArrayList<Procedure>();
    proc = Procedure();
          line = proc.line; column = proc.column;
          procs.add(proc);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      proc = Procedure();
                  procs.add(proc);
    }
          {if (true) return new Program(line, column, procs);}
    throw new Error("Missing return statement in function");
  }

  final public Procedure Procedure() throws ParseException {
        Token t;
        List<FormalParam> params;
        List<FormalParam> touches = new ArrayList<FormalParam>();
        Pred pre, post;
        Stmt stmt;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(30);
    params = FormalParams();
    jj_consume_token(31);
    pre = Precondition();
    post = Postcondition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
      touches = FormalParams();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(33);
    stmt = StmtList();
    jj_consume_token(34);
          {if (true) return new Procedure(t.beginLine, t.beginColumn, t.image,
                                                params, pre, post, touches, stmt);}
    throw new Error("Missing return statement in function");
  }

  final public List<FormalParam> FormalParams() throws ParseException {
        List<FormalParam> ret = new ArrayList<FormalParam>();
        FormalParam p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      p = FormalParam();
                                    ret.add(p);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(35);
        p = FormalParam();
                                          ret.add(p);
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public FormalParam FormalParam() throws ParseException {
        Token t;
    t = jj_consume_token(IDENTIFIER);
                  {if (true) return new FormalParam(t.image, Type.INT);}
    throw new Error("Missing return statement in function");
  }

  final public Stmt StmtList() throws ParseException {
        Stmt stmt;
        Stmt ret;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOCAL:
    case SKIP_T:
    case IF:
    case WHILE:
    case IDENTIFIER:
    case 33:
    case 40:
    case 41:
      ret = Stmt();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOCAL:
        case SKIP_T:
        case IF:
        case WHILE:
        case IDENTIFIER:
        case 33:
        case 40:
        case 41:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        stmt = Stmt();
                                  ret = new SeqStmt(-1, -1, ret, stmt);
      }
      break;
    default:
      jj_la1[5] = jj_gen;
                  ret = new SkipStmt(-1, -1);
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Pred Precondition() throws ParseException {
        Pred ret = null;
    jj_consume_token(36);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case TRUE:
    case FALSE:
    case FORALL:
    case EXISTS:
    case IDENTIFIER:
    case 30:
    case 45:
    case 53:
    case 56:
      ret = Pred();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Pred Postcondition() throws ParseException {
        Pred ret = null;
    jj_consume_token(37);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case TRUE:
    case FALSE:
    case FORALL:
    case EXISTS:
    case IDENTIFIER:
    case 30:
    case 45:
    case 53:
    case 56:
      ret = Pred();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Pred Invariant() throws ParseException {
        Pred ret;
    jj_consume_token(38);
    ret = Pred();
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Trm Variant() throws ParseException {
        Trm ret;
    jj_consume_token(39);
    ret = Trm();
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Stmt Stmt() throws ParseException {
        Stmt ret;
    if (jj_2_1(2)) {
      ret = CallStmt();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        ret = IfStmt();
        break;
      case WHILE:
        ret = LoopStmt();
        break;
      case 33:
        ret = BlockStmt();
        break;
      default:
        jj_la1[8] = jj_gen;
        if (jj_2_2(3)) {
          ret = LocalDefStmt();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ret = AssignStmt();
            break;
          case 40:
            ret = AssumeStmt();
            break;
          case 41:
            ret = AssertStmt();
            break;
          case SKIP_T:
            ret = SkipStmt();
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public CallStmt CallStmt() throws ParseException {
        Token t;
        List<ConcreteParam> params;
    t = jj_consume_token(IDENTIFIER);
    params = ConcreteParams();
          {if (true) return new CallStmt(t.beginLine, t.beginColumn, t.image, params);}
    throw new Error("Missing return statement in function");
  }

  final public List<ConcreteParam> ConcreteParams() throws ParseException {
        List<ConcreteParam> ret = new ArrayList<ConcreteParam>();
        ConcreteParam p;
    jj_consume_token(30);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case 30:
    case 45:
    case 53:
    case 56:
      p = ConcreteParam();
                                              ret.add(p);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        jj_consume_token(35);
        p = ConcreteParam();
                                                    ret.add(p);
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(31);
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public ConcreteParam ConcreteParam() throws ParseException {
        Exp e;
        Token t;
    e = Exp();
          {if (true) return new IntConcreteParam(e);}
    throw new Error("Missing return statement in function");
  }

  final public BlockStmt BlockStmt() throws ParseException {
        Token t;
        Stmt stmt;
    t = jj_consume_token(33);
    stmt = StmtList();
    jj_consume_token(34);
          {if (true) return new BlockStmt(t.beginLine, t.beginColumn, stmt);}
    throw new Error("Missing return statement in function");
  }

  final public AssumeStmt AssumeStmt() throws ParseException {
        Token t;
        Pred hypothesis;
    t = jj_consume_token(40);
    hypothesis = Pred();
          {if (true) return new AssumeStmt(t.beginLine, t.beginColumn, hypothesis);}
    throw new Error("Missing return statement in function");
  }

  final public AssertStmt AssertStmt() throws ParseException {
        Token t;
        Pred query;
    t = jj_consume_token(41);
    query = Pred();
          {if (true) return new AssertStmt(t.beginLine, t.beginColumn, query);}
    throw new Error("Missing return statement in function");
  }

  final public AssignStmt AssignStmt() throws ParseException {
        VarIntExp left;
        Exp right;
    left = VarIntExp();
    jj_consume_token(42);
    right = Exp();
          {if (true) return new AssignStmt(left.line, left.column, left, right);}
    throw new Error("Missing return statement in function");
  }

  final public IfStmt IfStmt() throws ParseException {
        BoolExp condition;
        Stmt thenS;
        Stmt elseS;
        Token t;
    t = jj_consume_token(IF);
    condition = BoolExp();
    jj_consume_token(THEN);
    thenS = Stmt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elseS = Stmt();
      break;
    default:
      jj_la1[12] = jj_gen;
                          elseS = new SkipStmt(-1,-1);
    }
          {if (true) return new IfStmt(t.beginLine, t.beginColumn,
                                condition, thenS, elseS);}
    throw new Error("Missing return statement in function");
  }

  final public LoopStmt LoopStmt() throws ParseException {
        Pred invariant;
        Trm variant;
        Exp condition;
        Stmt body;
        Token t;
    t = jj_consume_token(WHILE);
    condition = Exp();
    invariant = Invariant();
    variant = Variant();
    jj_consume_token(DO);
    body = Stmt();
          {if (true) return new LoopStmt(t.beginLine, t.beginColumn, condition,
                invariant, variant, body);}
    throw new Error("Missing return statement in function");
  }

  final public LocalDefStmt LocalDefStmt() throws ParseException {
        VarIntExp left;
        Exp right;
        Token t;
    t = jj_consume_token(LOCAL);
    left = VarIntExp();
    jj_consume_token(42);
    right = Exp();
          {if (true) return new LocalDefStmt(t.beginLine, t.beginColumn, left, right);}
    throw new Error("Missing return statement in function");
  }

  final public SkipStmt SkipStmt() throws ParseException {
        Token t;
    t = jj_consume_token(SKIP_T);
          {if (true) return new SkipStmt(t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp() throws ParseException {
        Exp ret;
    if (jj_2_3(2147483647)) {
      ret = BoolExp();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case 30:
      case 53:
      case 56:
        ret = IntExp();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BoolExp BoolExp() throws ParseException {
        BoolExp ret;
    ret = OrExp();
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BoolExp OrExp() throws ParseException {
        BoolExp ret, right;
    ret = AndExp();
    label_5:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(43);
      right = AndExp();
                  ret = new BinBoolExp(ret.line, ret.column,
                                        ret, BinBoolExp.Operator.OR, right);
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BoolExp AndExp() throws ParseException {
        BoolExp ret, right;
    ret = AtomBoolExp();
    label_6:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(44);
      right = AtomBoolExp();
                  ret = new BinBoolExp(ret.line, ret.column,
                                        ret, BinBoolExp.Operator.AND, right);
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BoolExp AtomBoolExp() throws ParseException {
        BoolExp e;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      t = jj_consume_token(45);
      e = BoolExp();
                  {if (true) return new NotBoolExp(t.beginLine, t.beginColumn, e);}
      break;
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_6(2147483647)) {
        e = RelBoolExp();
                  {if (true) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 30:
          jj_consume_token(30);
          e = BoolExp();
          jj_consume_token(31);
                  {if (true) return e;}
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public RelBoolExp RelBoolExp() throws ParseException {
        IntExp left;
        RelBoolExp.Operator op;
        IntExp right;
    left = IntExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
                      op = RelBoolExp.Operator.EQ;
      break;
    case 47:
      jj_consume_token(47);
                       op = RelBoolExp.Operator.NEQ;
      break;
    case 48:
      jj_consume_token(48);
                       op = RelBoolExp.Operator.LE;
      break;
    case 49:
      jj_consume_token(49);
                      op = RelBoolExp.Operator.LT;
      break;
    case 50:
      jj_consume_token(50);
                       op = RelBoolExp.Operator.GE;
      break;
    case 51:
      jj_consume_token(51);
                      op = RelBoolExp.Operator.GT;
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    right = IntExp();
          {if (true) return new RelBoolExp(left.line, left.column,
                left, op, right);}
    throw new Error("Missing return statement in function");
  }

  final public IntExp IntExp() throws ParseException {
        IntExp ret;
    ret = AdditiveIntExp();
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public IntExp AdditiveIntExp() throws ParseException {
        IntExp ret, right;
    ret = MultiplicativeIntExp();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
      case 53:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        right = MultiplicativeIntExp();
                  ret = new ArithIntExp(ret.line, ret.column,
                                        ret, ArithIntExp.Operator.ADD, right);
        break;
      case 53:
        jj_consume_token(53);
        right = MultiplicativeIntExp();
                  ret = new ArithIntExp(ret.line, ret.column,
                                        ret, ArithIntExp.Operator.SUBS, right);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public IntExp MultiplicativeIntExp() throws ParseException {
        IntExp ret, right;
    ret = AtomIntExp();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
      case 55:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        jj_consume_token(54);
        right = AtomIntExp();
                  ret = new ArithIntExp(ret.line, ret.column,
                                        ret, ArithIntExp.Operator.MUL, right);
        break;
      case 55:
        jj_consume_token(55);
        right = AtomIntExp();
                  ret = new ArithIntExp(ret.line, ret.column,
                                        ret, ArithIntExp.Operator.DIV, right);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public IntExp AtomIntExp() throws ParseException {
        IntExp e;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 53:
      t = jj_consume_token(53);
      e = AtomIntExp();
                  {if (true) return new NegIntExp(t.beginLine, t.beginColumn, e);}
      break;
    default:
      jj_la1[21] = jj_gen;
      if (jj_2_7(2)) {
        e = ArrayAccessIntExp();
                  {if (true) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          e = VarIntExp();
                  {if (true) return e;}
          break;
        case INTEGER_LITERAL:
          t = jj_consume_token(INTEGER_LITERAL);
                  {if (true) return new LiteralIntExp(t.beginLine, t.beginColumn,
                                Integer.parseInt(t.image));}
          break;
        case 30:
          jj_consume_token(30);
          e = IntExp();
          jj_consume_token(31);
                  {if (true) return e;}
          break;
        case 56:
          jj_consume_token(56);
          t = jj_consume_token(IDENTIFIER);
          jj_consume_token(56);
                  {if (true) return new ArraySizeIntExp(t.beginLine, t.beginColumn, t.image);}
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public VarIntExp VarIntExp() throws ParseException {
        Token t;
    t = jj_consume_token(IDENTIFIER);
          {if (true) return new VarIntExp(t.beginLine, t.beginColumn, t.image);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayAccessIntExp ArrayAccessIntExp() throws ParseException {
        Token t;
        IntExp e;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(57);
    e = IntExp();
    jj_consume_token(58);
          {if (true) return new ArrayAccessIntExp(t.beginLine, t.beginColumn,
                        t.image, e);}
    throw new Error("Missing return statement in function");
  }

  final public Pred Pred() throws ParseException {
        Pred ret;
    ret = ImpliesPred();
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Pred ImpliesPred() throws ParseException {
        Pred p1, p2;
    p1 = OrPred();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
      p2 = OrPred();
                  {if (true) return new BinaryPred(p1.line, p1.column,
                                        p1, BinaryPred.Operator.IMPLIES, p2);}
      break;
    case 60:
      jj_consume_token(60);
      p2 = OrPred();
                  {if (true) return new BinaryPred(p1.line, p1.column,
                                        p1, BinaryPred.Operator.IFF, p2);}
      break;
    default:
      jj_la1[23] = jj_gen;
                  {if (true) return p1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Pred OrPred() throws ParseException {
        Pred ret, right;
    ret = AndPred();
    label_9:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(43);
      right = AndPred();
                  ret = new BinaryPred(ret.line, ret.column,
                                        ret, BinaryPred.Operator.OR, right);
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Pred AndPred() throws ParseException {
        Pred ret, right;
    ret = AtomPred();
    label_10:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(44);
      right = AtomPred();
                  ret = new BinaryPred(ret.line, ret.column,
                                        ret, BinaryPred.Operator.AND, right);
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Pred AtomPred() throws ParseException {
        Pred p;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      t = jj_consume_token(45);
      p = AtomPred();
                  {if (true) return new NotPred(t.beginLine, t.beginColumn, p);}
      break;
    default:
      jj_la1[24] = jj_gen;
      if (jj_2_10(2147483647)) {
        jj_consume_token(30);
        p = Pred();
        jj_consume_token(31);
                  {if (true) return p;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
          t = jj_consume_token(FALSE);
                  {if (true) return new BooleanLiteralPred(t.beginLine, t.beginColumn,
                                        BooleanLiteralPred.Type.FALSEE);}
          break;
        case TRUE:
          t = jj_consume_token(TRUE);
                  {if (true) return new BooleanLiteralPred(t.beginLine, t.beginColumn,
                                        BooleanLiteralPred.Type.TRUEE);}
          break;
        case INTEGER_LITERAL:
        case IDENTIFIER:
        case 30:
        case 53:
        case 56:
          p = RelationPred();
                  {if (true) return p;}
          break;
        case FORALL:
        case EXISTS:
          p = QuantifiedPred();
                  {if (true) return p;}
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public QuantifiedPred QuantifiedPred() throws ParseException {
        Token t;
        QuantifiedPred.Type type;
        Token var;
        Trm lowerBound, upperBound;
        Pred subPred;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FORALL:
      t = jj_consume_token(FORALL);
                  type = QuantifiedPred.Type.FORALL;
      break;
    case EXISTS:
      t = jj_consume_token(EXISTS);
                  type = QuantifiedPred.Type.EXISTS;
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    var = jj_consume_token(IDENTIFIER);
    jj_consume_token(FROM);
    lowerBound = Trm();
    jj_consume_token(TO);
    upperBound = Trm();
    jj_consume_token(61);
    subPred = AtomPred();
          {if (true) return new QuantifiedPred(t.beginLine, t.beginColumn, type,
                        var.image, lowerBound, upperBound, subPred);}
    throw new Error("Missing return statement in function");
  }

  final public Pred RelationPred() throws ParseException {
        Trm left, right;
        RelationPred.Operator op;
    left = Trm();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
                      op = RelationPred.Operator.EQ;
      break;
    case 47:
      jj_consume_token(47);
                       op = RelationPred.Operator.NEQ;
      break;
    case 48:
      jj_consume_token(48);
                       op = RelationPred.Operator.LE;
      break;
    case 49:
      jj_consume_token(49);
                      op = RelationPred.Operator.LT;
      break;
    case 50:
      jj_consume_token(50);
                       op = RelationPred.Operator.GE;
      break;
    case 51:
      jj_consume_token(51);
                      op = RelationPred.Operator.GT;
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    right = Trm();
          {if (true) return new RelationPred(left.line, left.column,
                                left, op, right);}
    throw new Error("Missing return statement in function");
  }

  final public Trm Trm() throws ParseException {
        Trm ret;
    ret = AdditiveTrm();
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Trm AdditiveTrm() throws ParseException {
        Trm ret, right;
    ret = MultiplicativeTrm();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
      case 53:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        right = MultiplicativeTrm();
                  ret = new BinaryTrm(ret.line, ret.column,
                                        ret, BinaryTrm.Operator.ADD, right);
        break;
      case 53:
        jj_consume_token(53);
        right = MultiplicativeTrm();
                  ret = new BinaryTrm(ret.line, ret.column,
                                        ret, BinaryTrm.Operator.SUBS, right);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Trm MultiplicativeTrm() throws ParseException {
        Trm ret, right;
    ret = AtomTrm();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
      case 55:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        jj_consume_token(54);
        right = AtomTrm();
                  ret = new BinaryTrm(ret.line, ret.column,
                                        ret, BinaryTrm.Operator.MUL, right);
        break;
      case 55:
        jj_consume_token(55);
        right = AtomTrm();
                  ret = new BinaryTrm(ret.line, ret.column,
                                        ret, BinaryTrm.Operator.DIV, right);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Trm AtomTrm() throws ParseException {
        Trm trm;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 53:
      t = jj_consume_token(53);
      trm = AtomTrm();
                  {if (true) return new NegTrm(t.beginLine, t.beginColumn, trm);}
      break;
    case 30:
      jj_consume_token(30);
      trm = Trm();
      jj_consume_token(31);
                  {if (true) return trm;}
      break;
    default:
      jj_la1[32] = jj_gen;
      if (jj_2_11(2147483647)) {
        trm = ArrayAccessTrm();
                  {if (true) return trm;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          trm = VarTrm();
                  {if (true) return trm;}
          break;
        case INTEGER_LITERAL:
          trm = IntegerLiteralTrm();
                  {if (true) return trm;}
          break;
        case 56:
          trm = ArraySizeTrm();
                  {if (true) return trm;}
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public VarTrm VarTrm() throws ParseException {
        Token t;
        Trm.Type type = Trm.Type.CURR_VALUE;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 62:
      jj_consume_token(62);
                         type = Trm.Type.PRE_VALUE;
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
          {if (true) return new VarTrm(t.beginLine, t.beginColumn, t.image, type);}
    throw new Error("Missing return statement in function");
  }

  final public IntegerLiteralTrm IntegerLiteralTrm() throws ParseException {
        Token t;
    t = jj_consume_token(INTEGER_LITERAL);
          {if (true) return new IntegerLiteralTrm(t.beginLine, t.beginColumn, Integer.parseInt(t.image));}
    throw new Error("Missing return statement in function");
  }

  final public ArrayAccessTrm ArrayAccessTrm() throws ParseException {
        Token t;
        Trm index;
        Trm.Type type = Trm.Type.CURR_VALUE;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 62:
      jj_consume_token(62);
                         type = Trm.Type.PRE_VALUE;
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(57);
    index = Trm();
    jj_consume_token(58);
          {if (true) return new ArrayAccessTrm(t.beginLine, t.beginColumn, t.image, index, type);}
    throw new Error("Missing return statement in function");
  }

  final public ArraySizeTrm ArraySizeTrm() throws ParseException {
        Token t;
    jj_consume_token(56);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(56);
          {if (true) return new ArraySizeTrm(t.beginLine, t.beginColumn, t.image);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_3R_58() {
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_65()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(56)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(30)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(52)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(LOCAL)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(55)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(52)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(30)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(30)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(45)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(56)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_30()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(30)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(45)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(59)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(30)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(55)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(58)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PestParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[36];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0x0,0x0,0x8000000,0x8009c00,0x8009c00,0x49800380,0x49800380,0x9000,0x8000800,0x0,0x48000080,0x4000,0x48000080,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x48000080,0x0,0x0,0x49800380,0x1800000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x8000080,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x1,0x8,0x0,0x302,0x302,0x1202000,0x1202000,0x2,0x300,0x8,0x1202000,0x0,0x1200000,0x2000,0x0,0xfc000,0x300000,0x300000,0xc00000,0xc00000,0x200000,0x1000000,0x18000000,0x2000,0x1200000,0x0,0xfc000,0x300000,0x300000,0xc00000,0xc00000,0x200000,0x1000000,0x40000000,0x40000000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[11];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PestParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PestParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PestParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PestParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PestParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PestParser(PestParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PestParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 36; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 11; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
